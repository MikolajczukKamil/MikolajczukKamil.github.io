{"version":3,"sources":["App/App.tsx","reportWebVitals.ts","index.tsx","App/App.module.scss"],"names":["_zooms","tileSize","Option","image","updateImage","ref","useRef","service","progress","progressAll","started","onClick","current","appendChild","zoom","onProgress","canvas","document","createElement","width","height","context","getContext","rows","cols","loadedImages","row","col","img","Image","crossOrigin","addEventListener","drawImage","src","getUrl","Render","id","className","styles","container","App","useState","map","state","setState","s","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2d18c7ec.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\"\nimport styles from \"./App.module.scss\"\n\nconst _zooms = [0, 1, 2, 3]\n\nfunction getUrl(\n  row: number,\n  col: number,\n  zoom: number,\n  service = \"StandardResolution\"\n) {\n  return `https://mapy.geoportal.gov.pl/wss/service/PZGIK/ORTO/WMTS/${service}?&SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=ORTOFOTOMAPA&STYLE=default&TILEMATRIXSET=EPSG:2180&TILEMATRIX=EPSG:2180:${zoom}&TILEROW=${row}&TILECOL=${col}&FORMAT=image/png&rfh=1`\n}\n\nconst tileSize = 512\nconst sizeX = 5\nconst sizeY = 5\n\nfunction Render(\n  zoom: number,\n  onProgress: (many: number) => void,\n  service: string\n) {\n  const baseCol = 1366\n  const baseRow = 1990\n  const baseZoom = 13\n\n  const canvas = document.createElement(\"canvas\")\n  canvas.width = tileSize * sizeX * 2 ** zoom\n  canvas.height = tileSize * sizeY * 2 ** zoom\n\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\n  const rows = 2 ** zoom * sizeX\n  const cols = 2 ** zoom * sizeY\n\n  let loadedImages = 0\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      const img = new Image()\n\n      img.crossOrigin = \"anonymous\" // Tainted canvases may not be exported.\n      img.addEventListener(\"load\", () => {\n        context.drawImage(img, col * tileSize, row * tileSize)\n\n        onProgress(++loadedImages)\n      })\n\n      img.src = getUrl(\n        baseCol * 2 ** zoom + row,\n        baseRow * 2 ** zoom + col,\n        zoom + baseZoom,\n        service\n      )\n    }\n  }\n\n  return canvas\n}\n\ninterface IImage {\n  id: string\n  zoom: number\n  service: string\n  progressAll: number\n  progress: number\n  started: boolean\n}\n\nfunction App() {\n  const [state, setState] = useState<IImage[]>(() => [\n    ..._zooms.map((zoom, id) => ({\n      id: `StandardResolution-${id}`,\n      zoom,\n      progressAll: 2 ** zoom * sizeX * (2 ** zoom * sizeY),\n      progress: 0,\n      service: \"StandardResolution\",\n      started: false,\n    })),\n    ..._zooms.map((zoom, id) => ({\n      id: `HighResolution-${id}`,\n      zoom,\n      progressAll: 2 ** zoom * sizeX * (2 ** zoom * sizeY),\n      progress: 0,\n      service: \"HighResolution\",\n      started: false,\n    })),\n  ])\n\n  const updateImage = (image: any) =>\n    setState((s) => s.map((i) => (i.id === image.id ? { ...i, ...image } : i)))\n\n  return (\n    <div>\n      <h1>Zoomy, wiÄ™cej znaczy blizej</h1>\n\n      {state.map((image) => (\n        <Option key={image.id} image={image} updateImage={updateImage} />\n      ))}\n    </div>\n  )\n}\n\nfunction Option({\n  image,\n  updateImage,\n}: {\n  image: IImage\n  updateImage: (newImg: any) => void\n}) {\n  const ref = useRef<HTMLDivElement>(null)\n\n  function handleRender() {\n    if (image.started) return\n\n    updateImage({ ...image, started: true })\n\n    ref.current?.appendChild(\n      Render(\n        image.zoom,\n        (progress) => updateImage({ id: image.id, progress }),\n        image.service\n      )\n    )\n  }\n\n  return (\n    <section>\n      {image.service} - {image.progress} / {image.progressAll} pobranych kafli\n      <br />\n      {!image.started && (\n        <button onClick={handleRender}>Pobierz zoom {image.zoom}</button>\n      )}\n      <div ref={ref} className={styles.container} />\n    </section>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App/App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__phwG2\"};"],"sourceRoot":""}